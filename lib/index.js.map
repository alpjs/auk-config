{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport parseJSON from 'parse-json-object-as-map';\nimport minimist from 'minimist';\n\nconst argv = minimist(process.argv.slice(2));\n\n// To make obj fully immutable, freeze each object in obj.\n// Also makes Array, Map and Set read-only.\nfunction deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error('map is read-only');\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error('set is read-only');\n        };\n    }\n\n    Object.getOwnPropertyNames(obj).forEach((name) => {\n        let prop = obj[name];\n\n        // Freeze prop if it is an object\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n\n    // Freeze self\n    return Object.freeze(obj);\n}\n\nfunction existsConfig(dirname, name) {\n    return existsSync(dirname + name + '.json');\n}\n\nfunction loadConfig(dirname, name) {\n    let content = readFileSync(dirname + name + '.json');\n    return parseJSON(content);\n}\n\nexport default function aukConfig(dirname) {\n    dirname = dirname.replace(/\\/*$/, '/');\n    return app => {\n        app.existsConfig = (name) => existsConfig(dirname, name);\n        app.loadConfig = (name) => loadConfig(dirname, name);\n\n        const config = loadConfig(dirname, 'common');\n        for (let [key, value] of loadConfig(dirname, app.environment)) {\n            config.set(key, value);\n        }\n\n        if (existsConfig(dirname, 'local')) {\n            for (let [key, value] of loadConfig(dirname, 'local')) {\n                config.set(key, value);\n            }\n        }\n\n        let socketPath = argv['socket-path'] || argv.socketPath;\n        if (socketPath) {\n            config.set('socketPath', socketPath);\n        } else if (argv.port) {\n            config.set('port', argv.port);\n            config.delete('socketPath');\n        }\n\n        app.config = config;\n        app.context.config = config;\n        app.context.production = !!config.get('production');\n\n        return deepFreeze(config);\n    };\n}\n"]}